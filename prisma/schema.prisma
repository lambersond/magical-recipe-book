generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  characters    Character[]
}

// -----------------------
// Authentication models for Auth.js
// -----------------------
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}

// -----------------------
// Game models
// -----------------------

model Biome {
  id          String       @id @default(cuid())
  key         String       @unique
  name        String       @unique
  image       String?      @default("")
  description String?      @default("")

  ingredients BiomeIngredient[]
}

model Ingredient {
  id               String             @id @default(cuid())
  name             String             @unique
  rarity           String             @default("common") // e.g. "common", "uncommon", "rare"
  image            String?            @default("")
  description      String
  boon             String             // positive effects, e.g. "increases strength"
  bane             String             // negative effects, e.g. "decreases speed"

  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt

  biomes           BiomeIngredient[]
  recipes          RecipeIngredient[]
  foragedIngredients ForagedIngredient[]
}

model Recipe {
  id                  String              @id @default(cuid())
  name                String              @unique
  description         String?
  image               String?             @default("")
  difficulty          Int                 @default(10)
  boonText            String?
  baneText            String?
  mundaneIngredients  String[]

  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt

  magicalIngredients  RecipeIngredient[]
  knownRecipes        Cookbook[]
  cookedDishes        CookedDish[]
}

model Character {
  id           String          @id @default(cuid())
  name         String
  description  String?         @default("")
  image        String?         @default("")
  currentDay   Int             @default(1)    // start at day 1

  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt

  user         User            @relation(fields: [userId], references: [id])
  userId       String

  foragingLog       ForagedIngredient[]
  ingredientsPouch  IngredientsPouch?
  cookbook          Cookbook?
  backpack          Backpack?

  @@unique([userId, name])
}

model Cookbook {
  id           String      @id @default(cuid())
  image        String?     @default("")
  
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  character Character      @relation(fields: [characterId], references: [id], onDelete: Cascade)
  characterId  String      @unique
  
  knownRecipes Recipe[]

  @@index([characterId])
}

model IngredientsPouch {
  id           String      @id @default(cuid())

  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  character    Character   @relation(fields: [characterId], references: [id], onDelete: Cascade)
  characterId  String      @unique
  
  magicalIngredients ForagedIngredient[] @relation("PouchMagicalIngredients")
  commonIngredients  Int @default(0)

  @@index([characterId])
}

model ForagedIngredient {
  id                String      @id @default(cuid())
  foundOnDay        Int         
  commonIngredients Int         @default(0)
  isExpired         Boolean     @default(false)
  isUsed            Boolean     @default(false)
  
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  character    Character   @relation(fields: [characterId], references: [id], onDelete: Cascade)
  characterId  String
  
  magicalIngredient Ingredient? @relation(fields: [magicalIngredientId], references: [id])
  magicalIngredientId String?
  
  ingredientsPouch IngredientsPouch? @relation("PouchMagicalIngredients", fields: [pouchId], references: [id], onDelete: Cascade)
  pouchId          String?
  
  @@index([characterId])
}

model Backpack {
  id           String       @id @default(cuid())

  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  character    Character    @relation(fields: [characterId], references: [id], onDelete: Cascade)
  characterId  String       @unique
  
  cookedDishes CookedDish[]
  infusedItems InfusedItem[]

  @@index([characterId])
}

model CookedDish {
  id            String      @id @default(cuid())
  status        String      // success | fail | boon | bane | prepared
  consumedOnDay Int?        // null if not consumed yet
  cookedOnDay   Int

  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  recipe        Recipe      @relation(fields: [recipeId], references: [id])
  recipeId      String
  
  backpack      Backpack?   @relation(fields: [backpackId], references: [id], onDelete: Cascade)
  backpackId    String?

  @@index([backpackId])
}

model InfusedItem {
  id           String      @id @default(cuid())
  infusedOnDay Int
  quantity     Int
  
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  
  backpack     Backpack?   @relation(fields: [backpackId], references: [id], onDelete: Cascade)
  backpackId   String?

  @@index([backpackId])
}

// -------------------------
// Many-to-many relationships
// --------------------------

model BiomeIngredient {
  biome       Biome      @relation(fields: [biomeId], references: [id])
  biomeId     String
  ingredient  Ingredient @relation(fields: [ingredientId], references: [id])
  ingredientId String

  @@id([biomeId, ingredientId])
}

model RecipeIngredient {
  recipe      Recipe     @relation(fields: [recipeId], references: [id])
  recipeId    String
  ingredient  Ingredient @relation(fields: [ingredientId], references: [id])
  ingredientId String

  @@id([recipeId, ingredientId])
}
